// This file is part of CycloneDX GoMod
//
// Licensed under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an “AS IS” BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) OWASP Foundation. All Rights Reserved.

package main

import (
	"encoding/json"
	"flag"
	"log"
	"net/http"
	"os"
	"regexp"
	"sort"
	"text/template"
	"time"

	"github.com/CycloneDX/cyclonedx-gomod/internal/license/spdx"
	"github.com/CycloneDX/cyclonedx-gomod/internal/util"
)

type LicenseList struct {
	Version  string         `json:"licenseListVersion"`
	Licenses []spdx.License `json:"licenses"`
}

const licenseListURL = "https://raw.githubusercontent.com/spdx/license-list-data/master/json/licenses.json"

var (
	licenseListVersionRegex = regexp.MustCompile(`//.* version: ([a-f0-9]+)`)
	outputTemplate          = template.Must(template.New("").Parse(`// This file is part of CycloneDX GoMod
//
// Licensed under the Apache License, Version 2.0 (the “License”);
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an “AS IS” BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
// Copyright (c) OWASP Foundation. All Rights Reserved.

// Code generated by go generate. DO NOT EDIT.

// License list version: {{ .List.Version }}
// Generated at:         {{ .Timestamp }}

package spdx

func init() {
	licenses = []License {
	{{- range .List.Licenses }}
		{
			ID:        "{{ .ID }}",
			Reference: "{{ .Reference }}",
		},
	{{- end }}
	}
}
`))
)

func main() {
	var outputFilePath string

	flag.StringVar(&outputFilePath, "o", "", "Output file path")
	flag.Parse()

	if outputFilePath == "" {
		log.Fatal("no output file path provided")
	}

	log.Printf("fetching license list from %s", licenseListURL)
	res, err := http.Get(licenseListURL)
	if err != nil {
		log.Fatalf("failed to fetch license list: %v", err)
	}

	var licenseList LicenseList
	if err := json.NewDecoder(res.Body).Decode(&licenseList); err != nil {
		log.Fatalf("failed to decode license list: %v", err)
	}
	res.Body.Close()

	if util.FileExists(outputFilePath) {
		log.Printf("output file %s exists already, let's see if we need to update it", outputFilePath)
		outputFileContent, err := os.ReadFile(outputFilePath)
		if err != nil {
			log.Fatalf("failed to open output file: %v", err)
		}

		matches := licenseListVersionRegex.FindStringSubmatch(string(outputFileContent))
		if len(matches) == 2 {
			if matches[1] == licenseList.Version {
				log.Printf("output file is already current (version: %s)", licenseList.Version)
				return
			}
			log.Printf("update required (current: %s; new: %s)", matches[1], licenseList.Version)
		} else {
			log.Println("unable to determine current license list version")
		}
	}

	// Sort licenses by their ID, so it's easier to spot differences when diffing.
	sort.Slice(licenseList.Licenses, func(i, j int) bool {
		return licenseList.Licenses[i].ID < licenseList.Licenses[j].ID
	})

	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		log.Fatalf("failed to create output file: %v", err)
	}
	defer outputFile.Close()

	log.Printf("writing licenses to %s", outputFilePath)
	err = outputTemplate.Execute(outputFile, struct {
		Timestamp string
		List      LicenseList
	}{
		Timestamp: time.Now().Format(time.RFC3339),
		List:      licenseList,
	})
	if err != nil {
		log.Fatalf("failed to write licenses: %v", err)
	}
}
